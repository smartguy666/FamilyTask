@page "/manage-tasks"
@inject HttpClient Http
@using FamilyTask.Components
@using FamilyTask.Shared.Components
 

@if(isLoaded) {
    <div class="page-wrapper row m-0 col-12 p-0">
        <div class="col-4 p-0">
            <LeftMenu MenuItems="@leftMenuItem" OnAddItem="@onAddItem"/>
        </div>
        <div class="col-8 p-0">
            @if (showLister) {
                <div class="col-10 offset-1 pt-5">
                    <div class="row m-0">
                        <Field class="col-9 p-0 custom-input">
                            <TextEdit Placeholder="Enter New Task"/>
                        </Field>
                        <div class="col-3 p-0 text-right">
                            <Button class="add-btn px-4">Add</Button>
                        </div>
                    </div>
                </div>
                <div class="col-10 offset-1">
                    <TaskListerComponent Tasks="@tasksToShow"/>
                </div>
            }
            @if(showCreator) {
                <div class="col-10 offset-1 pt-5">
                    <FamilyMemberCreator onAddCallback="@onMemberAdd" />
                </div>
            }
        </div>
    </div>
}

@code {
    private FamilyMember[] members;
    private MenuItem[] leftMenuItem;
    private MemberTasks[] allTasks;
    private MemberTasks[] tasksToShow;
    private TaskModel[] tasksToShow_temp;
    private TaskModel[] allTasks_temp;
    private bool isLoaded;
    private bool showLister;
    private bool showCreator;
    protected override async Task OnInitializedAsync () {

        members = await Http.GetFromJsonAsync<FamilyMember[]>("https://localhost:5001/api/Members");
        allTasks = await Http.GetFromJsonAsync<MemberTasks[]>("https://localhost:5001/api/Tasks");

        //members = await Http.GetFromJsonAsync<FamilyMember[]> ("sample-data/family-members.json");
        //allTasks = await Http.GetFromJsonAsync<TaskModel[]> ("sample-data/tasks.json");

        leftMenuItem = new MenuItem[members.Length + 1];
        leftMenuItem[0] = new MenuItem {
            label = "All Tasks",
            referenceId = Guid.Empty,
            isActive = true
        };
        leftMenuItem[0].ClickCallback += showAllTasks;
        for (int i = 1; i < members.Length + 1; i++)
        {
            leftMenuItem[i] = new MenuItem {
                iconColor = members[i-1].avatar,
                label = members[i-1].firstname,
                referenceId = members[i-1].id,
                isActive = false
            };
            leftMenuItem[i].ClickCallback += onItemClick;
        }
        showAllTasks(null, leftMenuItem[0]);
        isLoaded = true;
    }

    private void onAddItem()
    {
        showLister = false;
        showCreator = true;
        makeMenuItemActive(null);
        StateHasChanged();
    }

    private void onItemClick(object sender, object e)
    {
        Guid val = (Guid)e.GetType().GetProperty("referenceId").GetValue(e);
        makeMenuItemActive(e);
        if(allTasks != null && allTasks.Length > 0) {
            tasksToShow = allTasks.Where(item => {
                if (item.AssignedToId != null) {
                    return item.AssignedToId == val;
                } else {
                    return false;
                }
            }).ToArray();
        }
        showLister = true;
        showCreator = false;
        StateHasChanged();
    }
    private void showAllTasks(object sender, object e)
    {
        tasksToShow = allTasks;
        showLister = true;
        showCreator = false;
        makeMenuItemActive(e);
        StateHasChanged();
    }

    private void makeMenuItemActive(object e)
    {
        foreach (var item in leftMenuItem)
        {
            item.isActive = false;
        }
        if(e != null) {
            e.GetType().GetProperty("isActive").SetValue(e, true);
        }
    }

    private async Task onMemberAdd(object e)
    {
        FamilyMember obj = new FamilyMember();
        obj.email= (string)e.GetType().GetProperty("email").GetValue(e);
        obj.firstname= (string)e.GetType().GetProperty("firstname").GetValue(e);
        obj.lastname= (string)e.GetType().GetProperty("lastname").GetValue(e);
        obj.roles= (string)e.GetType().GetProperty("roles").GetValue(e);
        obj.avatar= (string)e.GetType().GetProperty("avatar").GetValue(e);

        //var addItem = new dynamic { Name = e, IsComplete = false };
        var result = await Http.PostAsJsonAsync("https://localhost:5001/api/Members", obj);
    }
  
}